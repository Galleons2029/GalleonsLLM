# -*- coding: utf-8 -*-
# @Time    : 2024/9/20 15:11
# @Author  : Galleons
# @File    : prompts.py

"""
用来存放所以提示模板
"""

from pydantic_settings import BaseSettings, SettingsConfigDict


class Prompts(BaseSettings):
    model_config = SettingsConfigDict(extra="allow",env_file="../.env", env_file_encoding="utf-8")

    # prompt: str = """You are an AI language model assistant. Your task is to generate {to_expand_to_n}
    # different versions of the given user question to retrieve relevant documents from a vector
    # database. By generating multiple perspectives on the user question, your goal is to help
    # the user overcome some of the limitations of the distance-based similarity search.
    # Provide these alternative questions seperated by '{separator}'.
    # Original question: {question}"""
    query_expansion: str = """你是一名AI语言模型助手，任务是为给定的用户问题生成{to_expand_to_n}个不同版本的相似问题，以便从向量数据库中检索相关文档。
    通过提供用户问题的多种视角，你的目标是帮助用户克服基于距离的相似性搜索中的某些限制。请用'{separator}'分隔这些相似问题。
    原始问题：{question}
    """


    # prompt: str = """You are an AI language model assistant. Your task is to extract information from a user question.
    # The required information that needs to be extracted is the user or author id.
    # Your response should consist of only the extracted id (e.g. 1345256), nothing else.
    # User question: {question}"""
    self_query: str = """你是一名AI语言模型助手，任务是从用户问题中提取信息。
    你需要提取的是用户或作者的ID。你的回复应只包含提取出的ID（例如：1345256），不应包含其他内容，如果没有ID相关信息则返回None。
    用户问题：{question}
    """


    # prompt: str = """You are an AI language model assistant. Your task is to rerank passages related to a query
    # based on their relevance.
    # The most relevant passages should be put at the beginning.
    # You should only pick at max {keep_top_k} passages.
    # The provided and reranked documents are separated by '{separator}'.
    #
    # The following are passages related to this query: {question}.
    #
    # Passages:
    # {passages}
    # """
    reranking: str = """你是一名AI语言模型助手，任务是在不更改文本内容的前提下根据相关性对与查询相关的段落进行重新排序。
    最相关的段落应放在最前面。你最多只能选择{keep_top_k}个段落。原始段落和重新排序后的段落用'{separator}'分隔。

    以下是与该查询相关的段落：{question}。

    段落： 
    {passages} 
    """


    # simple_prompt: str = """You are an AI language model assistant. Your task is to generate a cohesive and concise response to the user question.
    # Question: {question}
    # """
    simple_prompt: str = """你是一名AI语言模型助手。你的任务是生成一个连贯且简明的回复，以回答用户的问题。
    用户问题：{question}
    """


    # rag_prompt: str = """ You are a specialist in technical content writing. Your task is to create technical content based on a user query given a specific context
    # with additional information consisting of the user's previous writings and his knowledge.
    #
    # Here is a list of steps that you need to follow in order to solve this task:
    # Step 1: You need to analyze the user provided query : {question}
    # Step 2: You need to analyze the provided context and how the information in it relates to the user question: {context}
    # Step 3: Generate the content keeping in mind that it needs to be as cohesive and concise as possible related to the subject presented in the query and similar to the users writing style and knowledge presented in the context.
    # """
    rag_prompt: str = """ 你是一名技术内容写作专家。你的任务是根据用户查询，结合提供的上下文和用户的既有知识，撰写技术内容。

    为此，请按照以下步骤执行：
    1. 分析用户的查询：{question}，明确用户的需求。
    2. 分析提供的上下文，理解其中的信息如何与用户的问题相关：{context}。
    3. 撰写内容时，请确保语言连贯、简洁，并与上下文中用户的写作风格和知识相一致，精准回应用户的问题。
    """


    #     prompt: str = """
    #         You are an AI assistant and your task is to evaluate the output generated by another LLM.
    #         You need to follow these steps:
    #         Step 1: Analyze the user query: {query}
    #         Step 2: Analyze the response: {output}
    #         Step 3: Evaluate the generated response based on the following criteria and provide a score from 1 to 5 along with a brief justification for each criterion:
    #
    #         Evaluation:
    #         Relevance - [score]
    #         [1 sentence justification why relevance = score]
    #         Coherence - [score]
    #         [1 sentence justification why coherence = score]
    #         Conciseness - [score]
    #         [1 sentence justification why conciseness = score]
    # """
    llm_evaluation: str = """你是一名AI助手，任务是评估另一款语言模型生成的输出。请按照以下步骤进行操作：
        步骤1：分析用户的查询：{query}
        步骤2：分析生成的回复：{output}
        步骤3：根据以下标准对生成的回复进行评估，并为每个标准评分（1到5分），同时提供简短的理由。

        评估标准：
        1. 相关性 - [评分]
           [简短说明为什么相关性得此评分]
        2. 连贯性 - [评分]
           [简短说明为什么连贯性得此评分]
        3. 简洁性 - [评分]
           [简短说明为什么简洁性得此评分]
        """


    # prompt: str = """You are an AI assistant and your task is to evaluate the output generated by another LLM.
    # The other LLM generates writing content based on a user query and a given context.
    # The given context is compressed of custom data produces by a user that consists of posts, articles or code fragments.
    # Here is a list of steps you need to follow in order to solve this task:
    # Step 1: You need to analyze the user query : {query}
    # Step 2: You need to analyze the given context: {contex}
    # Step 3: You need to analyze the generated output: {output}
    # Step 4: Generate the evaluation
    # When doing the evaluation step you need to take the following into consideration the following:
    # -The evaluation needs to have some sort of metrics.
    # -The generated content needs to be evaluated based on the writing similarity form the context.
    # -The generated content needs to be evaluated based on its coherence and conciseness related to the given query and context.
    # -The generated content needs to be evaluated based on how well it represents the user knowledge extracted from the context."""
    rag_evaluation: str = """你是一名AI助手，任务是评估由另一款语言模型生成的输出内容。
    该语言模型根据用户的查询和提供的上下文生成写作内容。提供的上下文由用户创建的自定义数据组成，包括帖子、文章或代码片段。

    为完成此任务，请按照以下步骤操作：
    步骤1：分析用户的查询：{query}
    步骤2：分析提供的上下文：{context}
    步骤3：分析生成的输出内容：{output}
    步骤4：进行评估,生成评估结果

    在评估时，需要考虑以下几点：
    - 评估应包含一些量化的指标。
    - 根据生成内容与上下文中的写作风格相似度进行评估。
    - 根据生成内容与查询和上下文的连贯性和简洁性进行评估。
    - 根据生成内容如何反映上下文中提取的用户知识进行评估。
    """


    category_query: str = """你是一名AI语言模型助手，任务是从用户需求中提取信息。
        你需要提取的是关于对工作岗位和内容的描述。你的回复应只包含提取出的岗位（例如：PHP开发工程师），不应包含其他内容，如果没有工作岗位相关信息则根据岗位描述内容判断是哪一种职位再输出岗位。
        用户需求：{question}
        """
    location_query: str = """你是一名AI语言模型助手，任务是从用户需求中提取信息。
            你需要提取的是招聘岗位的城市有哪些。你的回复应只包含提取出的城市名称，并用'#'隔开（例如：长沙市#武汉市#西安市），不应包含其他内容，如果没有城市相关信息则返回None。
            用户需求：{question}
            """
    education_query: str = """你是一名AI语言模型助手，任务是从用户问题中提取信息。
            你需要提取的是岗位招聘对于学历的要求。你的回复应只包含提取出的学历描述（例如：本科及以上），不应包含其他内容，如果没有学历要求的相关信息则返回None。
            用户问题：{question}
            """
    salary_query: str = """你是一名AI语言模型助手，任务是从用户问题中提取信息。
            你需要提取岗位招聘对于补贴的描述然后进行归类，总共有五险一金、五险二金、三险一金、六险一金、六险二金、四险二金、五险这七个等级，
            你的回复应只包含提取出的ID（例如：五险二金），不应包含其他内容，如果没有ID相关信息则返回None。
            用户问题：{question}
            """
    welfare_query: str = """你是一名AI语言模型助手，任务是从用户需求中提取信息。
            你需要提取岗位招聘对于福利的描述然后进行归类。你的回复应只包含提取出的福利描述并用'#'隔开（例如：扁平管理#弹性工作#岗位晋升），不应包含其他内容，如果没有相关信息则返回None。
            用户问题：{question}
            """


    job_item_fill: str = """你是一个专业的招聘专家，你现在需要帮助{company}发布岗位信息，这个公司的信息是{companyIntro}，职位要求是{positionIntro}。
        
        ## 任务要求
        你需要根据上述基本信息，准确的生成下面示例格式的内容并用JSON格式返回：
        
          "职位名称": "例如软件工程师",
          "工作城市": "城市名空格隔开，比如:长沙市 武汉市",
          "工作性质": "校招/社招/实习只能选一个",
          "学历要求": "根据公司定位职位要求来确定，在'不限/中专及以上/大专及以上/本科及以上/硕士及以上/博士及以上'中选择，只能选一个",
          "职位诱惑": "5个相关职位诱惑，用'#'隔开，比如：年底双薪#绩效奖金",
          "薪酬福利": "根据给出信息从无/五险一金/五险二金/三险一金/六险一金/六险二金/四险二金/五险中选择一个",
          "招聘人数": "整数",
          "月薪范围": "用'__k-__k'的区间来表示(前后最多相差5k)，范围0-240k，用'-'隔开，比如：5K-6K"
          "需求专业": "列出3-5个适合这个岗位的专业，用'#'隔开，比如：计算机科学#软件工程#网络工程"
               
        ## 任务开始
        你现在可以开始输出了，再次强调，输出必须按照JSON格式返回。不要输出多余的内容。
        """

    job_item_write: str = """你是一个专业的招聘专家，你现在需要帮助{company}发布岗位信息，这个公司的信息是{companyIntro}，职位要求是{positionIntro}。
    
        ## 任务要求
        你需要根据上述基本信息，准确的生成下面示例格式的内容,注意分点时用"\n"换行，并用JSON格式返回：
        
          "岗位职责": "500字左右，5个相关要求，比如：1.负责公司产品的开发工作。2.负责公司项目交付",
          "投递说明": "300字左右，简历投递说明注意事项，比如：1.关注官网二维码投递简历，2.主要主题，3.关注投递反馈渠道等",
          "岗位要求": "500字左右，5个相关要求，比如：1.专业匹配的，2.能力要求，3.优先"
        

        ## 任务开始
        你现在可以开始输出了，再次强调，必须按照输出的示例格式返回。不要输出多余的内容。
        """
    # 并用"#next-item#"将投递说明与岗位职责和岗位要求分隔开：
    job_match: str = """你是一个专业的推荐助手，你现在需要帮助学生找到合适的工作岗位，请根据一下给出的学生信息来生成一段用户画像描述，用来匹配合适的工作。

            ## 任务要求
            你需要根据以下基本信息，生成一整简短的总结来描述学生的需求，100字以内：

              "期望行业": {desire_industry},
              "单位性质": {attribute},
              "岗位类型": {second_category},
              "职位分类": {category},

            ## 任务开始
            你现在可以开始输出了，不要输出多余的内容。
            """




prompts = Prompts()